#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <string.h>

char buf[1024];
FILE *fdin;

int split(char in[1024], char out[4][30], char ch)
{
  int p1, row, col;
  p1 = row = col = 0;
  for(p1 = 0; in[p1] != '\0'; p1 ++)
  {
	if(in[p1] == '\n')
		break;
    if(in[p1] == ch)
    {
      out[row][col] = '\0';
      row ++;
      col = 0;
    }
    else
    {
      out[row][col] = in[p1];
      col ++;
    }
  }
  out[row][col] = '\0';
  return row+1;
}

int formatdate(char sd[30])  //fix the date format;  from y-m-d h:m:s to y-m-d-h:m:s
{
	int i;
	for(i = 0; sd[i] != '\0'; i ++)
	{
		if(sd[i] == ' ')
		{
			sd[i] = '-';
			break;
		}
	}
	return 0;
}

int producetaxtrip(char rec1[4][30], char rec2[4][30])  //using the two recorder to produce a taxtrip;
{
	if(0 == strcmp(rec1[0],rec2[0]))
	{
		printf("((\"%s\" \"%s\" TURE FALSE)(%s %s %s %s))\n",rec1[1],rec2[1],rec1[2],rec1[3],rec2[2],rec2[3]);
	}
	else if(rec1[0][0] == '\0' || rec2[0][0] == '\0')
	{
		printf("%s%s\n",rec1[0],rec2[0]);
		printf("(\n");
	}
	else
	{
		printf(")\n%s\n(\n",rec2[0]);
	}
	return 0;
}

struct lr{    //list recorder
	char        rec[4][30];
	struct lr   *next;
};

int main(int argc, char * argv[])
{
  int i,temp = 0;
  char c, fname[30];

  //init list recorder
  struct lr *p;
  p = (struct lr*)malloc(sizeof(struct lr));
  p->next = (struct lr*)malloc(sizeof(struct lr));
  p->next->next = p;

  //init recorder1 and recorder2
  p->rec[0][0] = p->next->rec[0][0] = '\0';

  
  if(argc == 1)
  {
	  strcpy(fname,"./test");
  }
  if(argc == 2)
  {
	  strcpy(fname, argv[1]);
  }

  if((fdin = fopen(fname,"r")) == NULL)
  {
	  printf("file open fail~\n");
	  return 0;
  }

  while(fgets(buf,1024,fdin) != NULL)
  {
	  split(buf,p->rec,',');
	  formatdate(p->rec[1]);
	  producetaxtrip(p->next->rec,p->rec);
	  p = p->next;
  }
  printf(")\n");
  fclose(fdin);
  return 0;
}
