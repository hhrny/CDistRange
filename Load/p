#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <string.h>

char buf[1024];

int main(int argc, char *argv[])
{
  FILE *fdin,*fdout,*fderr;
  int num_pointer = 0,i;
  int recorder_n = 0, status = 0, pointer = 0, recorder_err = 0;
  char temp_c;
  char filein[20],fileout[20],fileerr[20];
  double loc_x = 115.7, loc_y = 39.4, locm_x = 117.4, locm_y = 41.6, res_x = 0.0, res_y = 0.0, degree = 0.1, max_x = 0.0, min_x =  3000.0, max_y = 0.0, min_y = 3000.0;

  if(argc == 1)
  {
    strcpy(filein,"./test");
    strcpy(fileout,"./testout");
    strcpy(fileerr,"./testerr");
  }
  if(argc == 2)
  {
    strcpy(filein, argv[1]);
    strcpy(fileout,"./testout");
    strcpy(fileerr,"./testerr");
  }
  if(argc == 3)
  {
    strcpy(filein, argv[1]);
    strcpy(fileout, argv[2]);
    strcpy(fileerr,"./testerr");
  }
  if(argc == 4)
  {
    strcpy(filein, argv[1]);
    strcpy(fileout, argv[2]);
    strcpy(fileerr,argv[3]);
  }
  if((fdin = fopen(filein,"r")) == NULL)
  {
    printf("file test open fail~\n");
    return 0;
  }
  if((fdout = fopen(fileout,"w")) == NULL)
  {
    printf("file testout open fail~\n");
    return 0;
  }
  if((fderr = fopen(fileerr,"w")) == NULL)
  {
    printf("file testerr open fail~\n");
    return 0;
  }

  while(fgets(buf,1024,fdin) != NULL)
  {
    recorder_n ++;
    if(recorder_n%10000 == 0)
      printf("\r%d",recorder_n);
    pointer = 0;
    status = 0;
    degree = 0.1;
    res_x = res_y = 0.0;
    num_pointer = 0;
    while(buf[pointer] != '\0')
    {
      temp_c = buf[pointer++];
      switch(status)
      {
        case 0:
          if(temp_c <= '9' && temp_c >= '0')
            status = 1;
          else
            status = 10;
          break;
        case 1:
          if(temp_c <= '9' && temp_c >= '0')
            status = 1;
          else if(temp_c == ',')
            status = 2;
          else
            status = 10;
          break;
        case 2:
          if(temp_c <= '9' && temp_c >= '0')
            status = 2;
          else if(temp_c == '-')
            status = 3;
          else if(temp_c == ' ')
            status = 4;
          else
            status = 10;
          break;
        case 3:
          if(temp_c <= '9' && temp_c >= '0')
            status = 2;
          else
            status = 10;
          break;
        case 4:
          if(temp_c <= '9' && temp_c >= '0')
            status = 4;
          else if(temp_c == ':')
            status = 5;
          else if(temp_c == ',')
          {
            status = 6;
            num_pointer = pointer;
          }
          else
            status = 10;
          break;
        case 5:
          if(temp_c <= '9' && temp_c >= '0')
            status = 4;
          else
            status = 10;
          break;
        case 6:
          if(temp_c <= '9' && temp_c >= '0')
          {
            status = 6;
            res_x = res_x * 10 + (double)(temp_c - '0');
          }
          else if(temp_c == '.')
            status = 7;
          else
            status = 10;
          break;
        case 7:
          if(temp_c <= '9' && temp_c >= '0')
          {
            status = 7;
            res_x = res_x + (double)(temp_c - '0')*degree;
            degree *= 0.1;
          }
          else if(temp_c == ',' && res_x > loc_x && res_x < locm_x)
            status = 8;
          else
            status = 10;
          break;
        case 8:
          if(temp_c <= '9' && temp_c >= '0')
          {
            status = 8;
            res_y = res_y * 10 + (double)(temp_c - '0');
          }
          else if(temp_c == '.')
          {
            status = 9;
            degree = 0.1;//
          }
          else
            status = 10;
          break;
        case 9:
          if(temp_c <= '9' && temp_c >= '0')
          {
            status = 9;
            res_y = res_y + (double)(temp_c - '0')*degree;
            degree *= 0.1;
          }
          else if(temp_c == '\n' && res_y > loc_y && res_y < locm_y)
            status = 9;
          else
            status = 10;
          break;
        case 10:
          break;
      }
    }
    if(status == 9)
    {
      if(res_x > max_x)
        max_x = res_x;
      if(res_x < min_x)
        min_x = res_x;
      if(res_y > max_y)
        max_y = res_y;
      if(res_y < min_y)
        min_y = res_y;
      fprintf(fdout,"%s",buf);
    }
    else
    {
      recorder_err ++;
      fprintf(fderr,"%s",buf);
    }
  }
  fclose(fdin);
  fclose(fdout);
  fclose(fderr);
  printf("the total num of recorder is : %d\nthe num of error recorder is: %d\nthe region of x is %f ~ %f\nthe region of y is %f ~ %f\n",recorder_n, recorder_err, min_x, max_x, min_y, max_y);
  return 0;
}
